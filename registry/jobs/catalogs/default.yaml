spec: v1.0
desc: Default catalog for working with GitHub Pages.
extends: _common.yaml

dataset:
  - const: src
    desc: Dir where the source templates are.
    value: $(__dir)/_$(__catalogName)
    tags: [hidden]
  
  - const: dst
    desc: Local directory where to save the files.
    value: $(workDir)

  - const: dataQ
    desc: Questions for the creation of a data file.
    tags: [hidden, questions]
    value:
      - $(websiteDir)
      - input: fileName
        title: File name (w/o extension)
  
  - const: gemfileQ
    desc: Questions for the creation of Gemfile
    tags: [hidden, questions]
    value:
      - $(websiteDir)
      - $(plugins)
  
  - const: frontMatterQ
    desc: Questions for building a front matter.
    tags: [hidden, questions]
    value:
      - input: title
      - input: layout
      - input: permalink
  
  - const: pageQ
    desc: Questions for building a content page.
    tags: [hidden, questions]
    prepend:
      - $(websiteDir)
      - input: pageDir
        title: Directory where to create the page in website dir
        defaultValue: /
      - input: fileName
        title: File name (w/ extension)
    value: $(frontMatterQ)
  
  - const: dockerQ
    desc: Questions for returning a command line for running Jekyll w/ Docker.
    tags: [hidden, questions]
    value:
      - input: container
        defaultValue: jekyll
      - select: image
        options: [jekyll/jekyll:pages, jekyll/jekyll:latest]
        defaultValue: jekyll/jekyll:pages

jobs:
  - macro: gemfile
    title: Create the Gemfile file
    ini:
      - quiet: $answers = inquire $(gemfileQ) $(answers)
    dataset: [data, item, content]
    steps:
      - fs.createDir $(dst)/$(answers.websiteDir)

      - quiet: $item = cr.getItem $(src)/Gemfile.hbs
      - quiet: $data = merge $(answers) $(gems)
      - log $(item.value)
      - quiet: $content = hbs.render $(item.value) $(data)
      - file.write $(content) $(dst)$(answers.websiteDir)/Gemfile
  
  - macro: data
    title: Create a data file
    ini:
      - quiet: $answers = inquire $(dataQ) $(answers)
    dataset: [item, content]
    steps:
      - fs.createDir $(dst)/$(answers.websiteDir)/_data

      - quiet: $item = cr.getItem $(src)/_data/file.yaml.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)/$(answers.websiteDir)/_data/$(answers.fileName).yaml
  
  - macro: front-matter
    title: Build a front matter
    ini:
      - quiet: $answers = inquire $(frontMatterQ) $(answers)
    dataset: [item, content]
    steps:
      - quiet: $item = cr.getItem $(src)/frontMatter.hbs
      - log: hbs.render $(item.value) $(answers)

  - macro: page
    title: Create a content page
    ini:
      - quiet: $answers = inquire $(pageQ) $(answers)
    dataset: [item, content]
    steps:
      - fs.createDir $(dst)/$(answers.websiteDir)/$(answers.pageDir)

      - quiet: $item = cr.getItem $(src)/page.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)/$(answers.websiteDir)/$(answers.pageDir)/$(answers.fileName)
  
  - macro: docker
    title: Return a command line for running Jekyll with Docker
    ini:
      - quiet: $answers = inquire $(dockerQ) $(answers)
    steps:
      - log sudo docker run --name $(answers.container) -v $PWD:/srv/jekyll -p 4000:4000 -it --rm $(answers.image) bash -c 'bundle update && bundle exec jekyll clean && bundle exec jekyll s --host 0.0.0.0 --verbose'
